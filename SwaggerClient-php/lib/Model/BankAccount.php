<?php
/**
 * BankAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Rails API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.30.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BankAccount Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BankAccount implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BankAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'institution' => 'string',
        'branch_num' => 'string',
        'currency' => 'string',
        'country' => 'string',
        'name' => 'string',
        'routing' => 'string',
        'account_num' => 'string',
        'iban' => 'string',
        'swift_bic' => 'string',
        'bank_address' => 'string',
        'bank_city' => 'string',
        'bank_province' => 'string',
        'bank_postal_code' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'institution' => 'institution',
        'branch_num' => 'branchNum',
        'currency' => 'currency',
        'country' => 'country',
        'name' => 'name',
        'routing' => 'routing',
        'account_num' => 'accountNum',
        'iban' => 'iban',
        'swift_bic' => 'swiftBic',
        'bank_address' => 'bankAddress',
        'bank_city' => 'bankCity',
        'bank_province' => 'bankProvince',
        'bank_postal_code' => 'bankPostalCode'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'institution' => 'setInstitution',
        'branch_num' => 'setBranchNum',
        'currency' => 'setCurrency',
        'country' => 'setCountry',
        'name' => 'setName',
        'routing' => 'setRouting',
        'account_num' => 'setAccountNum',
        'iban' => 'setIban',
        'swift_bic' => 'setSwiftBic',
        'bank_address' => 'setBankAddress',
        'bank_city' => 'setBankCity',
        'bank_province' => 'setBankProvince',
        'bank_postal_code' => 'setBankPostalCode'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'institution' => 'getInstitution',
        'branch_num' => 'getBranchNum',
        'currency' => 'getCurrency',
        'country' => 'getCountry',
        'name' => 'getName',
        'routing' => 'getRouting',
        'account_num' => 'getAccountNum',
        'iban' => 'getIban',
        'swift_bic' => 'getSwiftBic',
        'bank_address' => 'getBankAddress',
        'bank_city' => 'getBankCity',
        'bank_province' => 'getBankProvince',
        'bank_postal_code' => 'getBankPostalCode'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['institution'] = isset($data['institution']) ? $data['institution'] : null;
        $this->container['branch_num'] = isset($data['branch_num']) ? $data['branch_num'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['account_num'] = isset($data['account_num']) ? $data['account_num'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['swift_bic'] = isset($data['swift_bic']) ? $data['swift_bic'] : null;
        $this->container['bank_address'] = isset($data['bank_address']) ? $data['bank_address'] : null;
        $this->container['bank_city'] = isset($data['bank_city']) ? $data['bank_city'] : null;
        $this->container['bank_province'] = isset($data['bank_province']) ? $data['bank_province'] : null;
        $this->container['bank_postal_code'] = isset($data['bank_postal_code']) ? $data['bank_postal_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets institution
     * @return string
     */
    public function getInstitution()
    {
        return $this->container['institution'];
    }

    /**
     * Sets institution
     * @param string $institution
     * @return $this
     */
    public function setInstitution($institution)
    {
        $this->container['institution'] = $institution;

        return $this;
    }

    /**
     * Gets branch_num
     * @return string
     */
    public function getBranchNum()
    {
        return $this->container['branch_num'];
    }

    /**
     * Sets branch_num
     * @param string $branch_num
     * @return $this
     */
    public function setBranchNum($branch_num)
    {
        $this->container['branch_num'] = $branch_num;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets routing
     * @return string
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     * @param string $routing
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets account_num
     * @return string
     */
    public function getAccountNum()
    {
        return $this->container['account_num'];
    }

    /**
     * Sets account_num
     * @param string $account_num
     * @return $this
     */
    public function setAccountNum($account_num)
    {
        $this->container['account_num'] = $account_num;

        return $this;
    }

    /**
     * Gets iban
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     * @param string $iban
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets swift_bic
     * @return string
     */
    public function getSwiftBic()
    {
        return $this->container['swift_bic'];
    }

    /**
     * Sets swift_bic
     * @param string $swift_bic
     * @return $this
     */
    public function setSwiftBic($swift_bic)
    {
        $this->container['swift_bic'] = $swift_bic;

        return $this;
    }

    /**
     * Gets bank_address
     * @return string
     */
    public function getBankAddress()
    {
        return $this->container['bank_address'];
    }

    /**
     * Sets bank_address
     * @param string $bank_address
     * @return $this
     */
    public function setBankAddress($bank_address)
    {
        $this->container['bank_address'] = $bank_address;

        return $this;
    }

    /**
     * Gets bank_city
     * @return string
     */
    public function getBankCity()
    {
        return $this->container['bank_city'];
    }

    /**
     * Sets bank_city
     * @param string $bank_city
     * @return $this
     */
    public function setBankCity($bank_city)
    {
        $this->container['bank_city'] = $bank_city;

        return $this;
    }

    /**
     * Gets bank_province
     * @return string
     */
    public function getBankProvince()
    {
        return $this->container['bank_province'];
    }

    /**
     * Sets bank_province
     * @param string $bank_province
     * @return $this
     */
    public function setBankProvince($bank_province)
    {
        $this->container['bank_province'] = $bank_province;

        return $this;
    }

    /**
     * Gets bank_postal_code
     * @return string
     */
    public function getBankPostalCode()
    {
        return $this->container['bank_postal_code'];
    }

    /**
     * Sets bank_postal_code
     * @param string $bank_postal_code
     * @return $this
     */
    public function setBankPostalCode($bank_postal_code)
    {
        $this->container['bank_postal_code'] = $bank_postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * BalancesApi
 * PHP version 5
 *
 * @category Class
 * @package  PaymentRails\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Payment Rails API
 *
 * No descripton provided (generated by PaymentRails Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.31.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PaymentRails\Client\Api;

use \PaymentRails\Client\Configuration;
use \PaymentRails\Client\ApiClient;
use \PaymentRails\Client\ApiException;
use \PaymentRails\Client\ObjectSerializer;

/**
 * BalancesApi Class Doc Comment
 *
 * @category Class
 * @package  PaymentRails\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BalancesApi
{

    /**
     * API Client
     *
     * @var \PaymentRails\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \PaymentRails\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\PaymentRails\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.paymentrails.com/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \PaymentRails\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \PaymentRails\Client\ApiClient $apiClient set the API client
     *
     * @return BalancesApi
     */
    public function setApiClient(\PaymentRails\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getPaymentrails
     *
     * 
     *
     * @return \PaymentRails\Client\Model\Balance
     * @throws \PaymentRails\Client\ApiException on non-2xx response
     */
    public function getPaymentrails()
    {
        list($response) = $this->getPaymentrailsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPaymentrailsWithHttpInfo
     *
     * 
     *
     * @return Array of \PaymentRails\Client\Model\Balance, HTTP status code, HTTP response headers (array of strings)
     * @throws \PaymentRails\Client\ApiException on non-2xx response
     */
    public function getPaymentrailsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/profile/balances/paymentrails";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PaymentRails\Client\Model\Balance',
                '/profile/balances/paymentrails'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\PaymentRails\Client\Model\Balance', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PaymentRails\Client\Model\Balance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPaypal
     *
     * 
     *
     * @return \PaymentRails\Client\Model\Balance
     * @throws \PaymentRails\Client\ApiException on non-2xx response
     */
    public function getPaypal()
    {
        list($response) = $this->getPaypalWithHttpInfo();
        return $response;
    }

    /**
     * Operation getPaypalWithHttpInfo
     *
     * 
     *
     * @return Array of \PaymentRails\Client\Model\Balance, HTTP status code, HTTP response headers (array of strings)
     * @throws \PaymentRails\Client\ApiException on non-2xx response
     */
    public function getPaypalWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/profile/balances/paypal";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\PaymentRails\Client\Model\Balance',
                '/profile/balances/paypal'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\PaymentRails\Client\Model\Balance', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\PaymentRails\Client\Model\Balance', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation queryBalances
     *
     * 
     *
     * @return map[string,\PaymentRails\Client\Model\Balance[]]
     * @throws \PaymentRails\Client\ApiException on non-2xx response
     */
    public function queryBalances()
    {
        list($response) = $this->queryBalancesWithHttpInfo();
        return $response;
    }

    /**
     * Operation queryBalancesWithHttpInfo
     *
     * 
     *
     * @return Array of map[string,\PaymentRails\Client\Model\Balance[]], HTTP status code, HTTP response headers (array of strings)
     * @throws \PaymentRails\Client\ApiException on non-2xx response
     */
    public function queryBalancesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/profile/balances";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,\PaymentRails\Client\Model\Balance[]]',
                '/profile/balances'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,\PaymentRails\Client\Model\Balance[]]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,\PaymentRails\Client\Model\Balance[]]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
